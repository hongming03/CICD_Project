# docker-compose up --build
# docker-compose down -v
# -v option is important to remove volumes too. Else, the db will not be re-initialized
version: '3.8'

services:
  web:
    build: .
    # Mapping port 5000 on the host to port 8000 on the container
    ports:
      - "5000:5000"

    # can remain as is, in github actions CI/CD, it will be overridden by env vars defined in the workflow file
    env_file:
      - .env
    depends_on:
      - db
  
  db:
    image: postgres:13
    # Creating a postgres database with the name, user and password defined in the .env file
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      # Ensures data is persisted even if the container is removed
      - postgres_data:/var/lib/postgresql/data
      # Postgres images have a special folder /docker-entrypoint-initdb.d/. Any .sql files in this folder will be run when the database is first initialized
      # Note: This will only run if the special folder(/docker-entrypoint-initdb.d/init.sql) in Postgres is empty. 
      # If you want to re-run it, you need to delete the volume or docker-compose down -v
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      retries: 10
      start_period: 5s

# Creating a host volume to map to the container
volumes:
  postgres_data:

