# docker-compose up --build
# --build is to rebuild the image before starting the containers, even if it thinks the image already exists
# docker-compose down -v
# -v option is important to remove volumes too. Else, the db will not be re-initialized
version: '3.8'

services:
  web:
    build: .
    # Mapping port 5000 on the host to port 8000 on the container
    ports:
      - "5000:5000"

    # can remain as is for local testing. In github actions CI/CD, it will be overridden by env vars defined in the workflow file during CICD
    env_file:
      - .env

    depends_on:
      - db

    healthcheck:
    # -f is needed to fail silently if the curl command fails. -f makes curl return a non-zero exit code if the HTTP response is 400 or greater
    # without -f curl does not treat HTTP errors like 404,500 as an error
    # Change /health to return 400, the container should be unhealthy
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 5s
      retries: 5
      start_period: 5s
  
  db:
    image: postgres:13

    # can remain as is for local testing. In github actions CI/CD, it will be overridden by env vars defined in the workflow file during CICD
    env_file:
      - .env

    # Creating a postgres database with the name, user and password defined in the .env file
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      # Ensures data is persisted even if the container is removed
      - postgres_data:/var/lib/postgresql/data
      # Postgres images have a special folder /docker-entrypoint-initdb.d/. Any .sql files in this folder will be run when the database is first initialized
      # Note: This will only run if the special folder(/docker-entrypoint-initdb.d/init.sql) in Postgres is empty. 
      # If you want to re-run it, you need to delete the volume or docker-compose down -v
      # - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro

    healthcheck:
    # CMD ["executable", "param1", ...] → runs directly (no shell features like variables, pipes).
    # CMD-SHELL "command string" → runs inside a shell (sh -c), so you can use environment variables
    
    # pg_isready -h localhost -p 5432 -U postgres -d postgres
    # returns - localhost:5432 - accepting connections (if healthy)

      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      retries: 10
      start_period: 5s

# Creating a host volume to map to the container
volumes:
  postgres_data:

